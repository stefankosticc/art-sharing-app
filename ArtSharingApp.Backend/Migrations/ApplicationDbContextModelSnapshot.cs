// <auto-generated />
using System;
using ArtSharingApp.Backend.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArtSharingApp.Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArtSharingApp.Backend.Models.Artwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedByArtistId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("GalleryId")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PostedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipsAndTricks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedByArtistId");

                    b.HasIndex("GalleryId");

                    b.HasIndex("PostedByUserId");

                    b.ToTable("Artworks");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.Favorites", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("ArtworkId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.Artwork", b =>
                {
                    b.HasOne("ArtSharingApp.Backend.Models.City", "City")
                        .WithMany("Artworks")
                        .HasForeignKey("CityId");

                    b.HasOne("ArtSharingApp.Backend.Models.User", "CreatedByArtist")
                        .WithMany("CreatedArtworks")
                        .HasForeignKey("CreatedByArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSharingApp.Backend.Models.Gallery", "Gallery")
                        .WithMany("Artworks")
                        .HasForeignKey("GalleryId");

                    b.HasOne("ArtSharingApp.Backend.Models.User", "PostedByUser")
                        .WithMany("PostedArtworks")
                        .HasForeignKey("PostedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("CreatedByArtist");

                    b.Navigation("Gallery");

                    b.Navigation("PostedByUser");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.Favorites", b =>
                {
                    b.HasOne("ArtSharingApp.Backend.Models.Artwork", "Artwork")
                        .WithMany("Favorites")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtSharingApp.Backend.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.Gallery", b =>
                {
                    b.HasOne("ArtSharingApp.Backend.Models.City", "City")
                        .WithMany("Galleries")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.User", b =>
                {
                    b.HasOne("ArtSharingApp.Backend.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.Artwork", b =>
                {
                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.City", b =>
                {
                    b.Navigation("Artworks");

                    b.Navigation("Galleries");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.Gallery", b =>
                {
                    b.Navigation("Artworks");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ArtSharingApp.Backend.Models.User", b =>
                {
                    b.Navigation("CreatedArtworks");

                    b.Navigation("Favorites");

                    b.Navigation("PostedArtworks");
                });
#pragma warning restore 612, 618
        }
    }
}
